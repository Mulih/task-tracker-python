#!/usr/bin/env python3
import argparse
import os
from task import load_tasks, save_tasks, Task


def add_task(description):
    """Add a new task to the tasks.json file."""
    tasks = load_tasks()
    new_task = {
        "id": len(tasks) + 1,
        "Description": description,
        "Status": "todo",
    }
    tasks.append(new_task)
    save_tasks(tasks)
    print(f"Task added: {new_task}")

def list_tasks():
    """List all tasks from the tasks.json file."""
    tasks = load_tasks()
    if not tasks:
        print("No tasks found.")
        return
    for task in tasks:
        print(f"ID: {task['id']}, Description: {task['Description']}, Status: {task['Status']}")
    print("Tasks loaded successfully.")

def update_task(task_id, status):
    """Update the status of a task."""
    tasks = load_tasks()
    for task in tasks:
        if task["id"] == task_id:
            task["Status"] = status
            save_tasks(tasks)
            print(f"Task {task_id} updated to {status}.")
            return
    print(f"Task {task_id} not found.")

def delete_task(task_id):
    """Delete a task from the tasks.json file."""
    tasks = load_tasks()
    tasks = [task for task in tasks if task["id"] != task_id]
    save_tasks(tasks)
    print(f"Task {task_id} deleted.")


def main():
    """Main function to handle CLI commands."""
    parser = argparse.ArgumentParser(description="Task Tracker CLI")
    subparsers = parser.add_subparsers(dest="command", help="Commands")

    # Add "add" command
    add_parser = subparsers.add_parser("add", help="Add a new task")
    add_parser.add_argument("description", type=str, help="Task description")
    add_parser.add_argument("status", type=str, choices=["todo", "in-progress", "done"], help="Task status")

    # Add "list" command
    list_parser = subparsers.add_parser("list", help="List all tasks")

    # Add "update" command
    update_parser = subparsers.add_parser("update", help="Update a task")
    update_parser.add_argument("task_id", type=int, help="Task ID")
    update_parser.add_argument("status", type=str, choices=["todo", "in-progress", "done"], help="New status")

    # Add "delete" command
    delete_parser = subparsers.add_parser("delete", help="Delete a task")
    delete_parser.add_argument("task_id", type=int, help="Task ID")

    # Add "help" command
    help_parser = subparsers.add_parser("help", help="Show help message")
    help_parser.add_argument("command", type=str, help="Command to get help for")
    help_parser.add_argument("description", type=str, help="Task description")
    help_parser.add_argument("task_id", type=int, help="Task ID")
    help_parser.add_argument("status", type=str, choices=["todo", "in-progress", "done"], help="New status")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    commands = {
        "add": lambda: add_task(args.description),
        "list": list_tasks,
        "update": lambda: update_task(args.task_id, args.status),
        "delete": lambda: delete_task(args.task_id),
        "help": lambda: parser.print_help(),
    }

    command_function = commands.get(args.command, parser.print_help)
    command_function()


if __name__ == "__main__":
    main()